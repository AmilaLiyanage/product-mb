/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.carbon.andes.transports.mqtt.adaptors.common;

import java.util.Map;
import java.util.Queue;
import java.util.Set;

/**
 * Andes stores messages generating a 64 bit Long ID, MQTT supports only 16 bit packet identifiers
 * This class will be used to generate delivery tags and maintain a relation between the IDs generated by Andes and MQTT
 * <p>
 *
 * @param <V> the type of id which is accepted by the protocol (Delivery Tag)
 * @param <K> the type of id which is provided by a given framework/server (Related Message ID)
 */
public class MessageDeliveryTagMap<V, K> {
    /**
     * Holds list of integers which could be marked as message ids
     * Querying - Message ID will be popped when a message is sent from the broker to subscriber
     * Add - When the message is acknowledged the ID will be placed back
     */
    private Queue<V> availableDeliveryTagList;

    /**
     * Holds for co-relation purposes between the message id accepted by the protocol and the id provided by the server
     * At a given time this map containts the messages which have being sent, but un-acknowledged
     */
    private Map<V, K> messageIdMapper;

    /**
     * Will initialize the values with the list of possible combinations which could act as the message Ids
     *
     * @param messageIdList the list of combinations which will act as the possibilities of message IDs
     * @param midMapper     relates between the delivery tag and the id generated by the cluster
     */
    public MessageDeliveryTagMap(Queue<V> messageIdList, Map<V, K> midMapper) {
        this.availableDeliveryTagList = messageIdList;
        this.messageIdMapper = midMapper;
    }

    /**
     * Retrieve the id of the message which should be the delivery tag
     *
     * @param relatedMessageId the id of the message which needs to be related
     * @return the id of the message which will be the delivery tag
     */
    public V getMessageDeliveryTag(K relatedMessageId) {
        V messageDeliveryTag = availableDeliveryTagList.poll();
        //Maps the relation between the provided id
        messageIdMapper.put(messageDeliveryTag, relatedMessageId);
        return messageDeliveryTag;
    }

    /**
     * Will put the message back to the queue
     *
     * @param messageId the id of the message
     * @return the message id which should be co-related
     */
    public K ackReceived(V messageId) {
        //Removes the co-relation
        K relatedMessageId = messageIdMapper.remove(messageId);
        //Makes the id available for reuse
        availableDeliveryTagList.add(messageId);
        return relatedMessageId;
    }

    /**
     * Gets the list of undelivered messages
     *
     * @return gets the list of undelivered message tags
     */
    public Set<Map.Entry<V, K>> getUndeliveredTags() {
        return messageIdMapper.entrySet();
    }
}
